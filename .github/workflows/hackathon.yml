name: Hackathon

on:
  workflow_dispatch:
    branches: [hackathon]
    inputs:
      agents:
        description: "Agents to run (comma-separated)"
        required: false
        default: "ZEROAGPT_03" # Default agents if none are specified

jobs:
  matrix-setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      env-name: ${{ steps.set-matrix.outputs.env-name }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "::set-output name=env-name::production"
            echo "::set-output name=matrix::[ 'gpt-engineer', 'smol-developer', 'Auto-GPT', 'mini-agi', 'beebot', 'BabyAGI', 'evo-ninja', 'Turbo' ]"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            IFS=',' read -ra matrix_array <<< "${{ github.event.inputs.agents }}"
            matrix_string="[ \"$(echo "${matrix_array[@]}" | sed 's/ /", "/g')\" ]"
            echo "::set-output name=env-name::production"
            echo "::set-output name=matrix::$matrix_string"
          else
            echo "::set-output name=env-name::testing"
            echo "::set-output name=matrix::[ 'mini-agi' ]"
          fi

  tests:
    environment:
      name: "${{ needs.matrix-setup.outputs.env-name }}"
    needs: matrix-setup
    env:
      min-python-version: "3.10"
    name: "${{ matrix.agent-name }}"
    runs-on: ubuntu-latest
    timeout-minutes: 50
    strategy:
      fail-fast: false
      matrix:
        agent-name: ${{fromJson(needs.matrix-setup.outputs.matrix)}}
    steps:
      - name: Print Environment Name
        run: |
          echo "Matrix Setup Environment Name: ${{ needs.matrix-setup.outputs.env-name }}"

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - id: get_date
        name: Get date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Run regression tests
        run: |
          ./run agent start ${{ matrix.agent-name }}
          cd benchmark
          poetry install 
          poetry run agbenchmark --mock
          poetry run agbenchmark --test=WriteFile
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AGENT_NAME: ${{ matrix.agent-name }}
          HELICONE_API_KEY: ${{ secrets.HELICONE_API_KEY }}
          REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt
          HELICONE_CACHE_ENABLED: false
          HELICONE_PROPERTY_AGENT: ${{ matrix.agent-name }}
          REPORT_LOCATION: ${{ format('../../reports/{0}', matrix.agent-name) }}

      # Support node.js-based agents.
      # NOTE: This is for example purposes, you will need to move this logic wherever you see fit

      - name: Read node version from .nvmrc (or use default v18.15)
        id: nvm
        run: echo NVMRC=$([[ -f .nvmrc ]] && cat .nvmrc || echo "v18.15") >> "$GITHUB_OUTPUT"
        working-directory: ${{ matrix.agent-name }}

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}

      # NOTE: this could be put within a generic `./install.sh` script
      #       that the agents can create and check-in to their repos
      - name: Install node.js dependencies & build
        run: yarn && yarn build
        working-directory: ${{ matrix.agent-name }}

      # NOTE: this will go within the `./start` script for evo.ninja
      - name: Start the agent
        run: yarn start:api -c &
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SERP_API_KEY: ${{ secrets.SERP_API_KEY }}
          # The env vars below are required right now for evo.ninja
          # but could easily be made optional (w/ defaults). would just
          # need to be able to push a new commit to our submission. Let me know please.
          GPT_MODEL: "gpt-4-0613"
          CONTEXT_WINDOW_TOKENS: 8000
          MAX_RESPONSE_TOKENS: 2000

      # After this step, evo.ninja will be running the agent-protocol at port 8000.
      # Simply run the benchmarks you would normally, nothing special past this point.
